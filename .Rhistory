for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
mod.sum <- summary.mblm(model)
# store results
regression_list[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"] ,
pvalue = mod.sum$coefficients["Year", 4]
)
}
}
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
# Check if the filtered data has more than 1 observation
if (nrow(month_station) > 1) {
model <- mblm(TAnomaly ~ Year, data = month_station)
mod.sum <- summary(model) # Use summary instead of summary.mblm if error persists
# store results
regression_list[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients[4, "Pr(>|z|)"] # Ensure correct indexing for p-value
)
} else {
# Handle the case with insufficient data
regression_list[[paste(station_id, month_num, sep = "_")]] <- NA
}
}
}
# store results
regression_list[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients["Year", "Pr(>|z|)"] # Ensure correct indexing for p-value
)
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
# Check if the filtered data has more than 1 observation
if (nrow(month_station) > 1) {
model <- mblm(TAnomaly ~ Year, data = month_station)
mod.sum <- summary(model) # Use summary instead of summary.mblm if error persists
# store results
regression_list[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients["Year", 4] # Ensure correct indexing for p-value
)
} else {
# Handle the case with insufficient data
regression_list[[paste(station_id, month_num, sep = "_")]] <- NA
}
}
}
subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
summarize(Nobs = n())
x <- subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
summarize(Nobs = n())
range(x$Nobs)
subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
filter(!is.na(Year) & !is.na(TAnomaly)) %>% # Ensure no NA values in key variables
do({
tryCatch({
model <- mblm(TAnomaly ~ Year, data = .)
mod.sum <- summary(model)
# Store results if model successfully fits
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients[2, "Pr(>|z|)"] # Adjust indexing based on your summary output structure
)
}, error = function(e) {
# Handle errors, such as insufficient non-NA observations, here
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- NA
})
})
# Note: Adjust the error handling and indexing based on actual needs and output structure.
library(dplyr)
library(mblm)
# Assuming regression_list is already defined and empty
regression_list <- list()
subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
filter(!is.na(Year) & !is.na(TAnomaly)) %>% # Ensure no NA values in key variables
do({
tryCatch({
model <- mblm(TAnomaly ~ Year, data = .)
mod.sum <- summary(model)
# Store results if model successfully fits
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients[2, "Pr(>|z|)"] # Adjust indexing based on your summary output structure
)
}, error = function(e) {
# Handle errors, such as insufficient non-NA observations, here
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- NA
})
})
warnings()
?do
?tryCatch
regression_list
subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
filter(!is.na(Year) & !is.na(TAnomaly)) %>% # Ensure no NA values in key variables
do({
tryCatch({
model <- mblm(TAnomaly ~ Year, data = .)
mod.sum <- summary(model)
# Store results if model successfully fits
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients[2, "Pr(>|z|)"] # Adjust indexing based on your summary output structure
)
}, error = function(e) {
# Handle errors, such as insufficient non-NA observations, here
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- NA
})
})
# Assuming regression_list is already defined and empty
regression_list <- list()
subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
filter(!is.na(Year) & !is.na(TAnomaly)) %>% # Ensure no NA values in key variables
do({
tryCatch({
model <- mblm(TAnomaly ~ Year, data = .)
mod.sum <- summary(model)
# Store results if model successfully fits
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"],
pvalue = mod.sum$coefficients[2, "Pr(>|z|)"] # Adjust indexing based on your summary output structure
)
}, error = function(e) {
# Handle errors, such as insufficient non-NA observations, here
regression_list[[paste(.$FDT_STA_ID[1], .$MonthNum[1], sep = "_")]] <- NA
})
})
# create list to store regression results
regression_list <- list()
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
month_station
x <- subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
summarize(Nobs = n())
range(x$Nobs)
NAs, = length(which(is.na()))
NAs = length(which(is.na()))
?n
NAs = length(which(is.na(.)))
x <- subset.df %>%
group_by(FDT_STA_ID, MonthNum) %>%
summarize(Nobs = n(),
# Count NAs across all columns for each group
NAs = sum(sapply(., function(col) sum(is.na(col)))))
x
View(x)
NA_list <- list()
for (month_num in 5:10) {
NA_count <- length(which(is.na(subset.df[, TAnomaly])))
NA_list[[paste(station_id,month_num, sep = "_")]] <- NA_count
}}
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
# Subset for the current station_id and month_num
current_data <- subset.df[subset.df$FDT_STA_ID == station_id & subset.df$MonthNum == month_num, ]
# Now count NA values in TAnomaly for this subset
NA_count <- sum(is.na(current_data$TAnomaly))
# Store the count in NA_list
NA_list[[paste(station_id, month_num, sep = "_")]] <- NA_count
}
}
View(NA_list)
max(NA_list)
NA_list
View(NA_list)
NA_list <- c()
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
mod.sum <- summary.mblm(model)
# store results
regression_list[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"] ,
pvalue = mod.sum$coefficients["Year", 4]
)
}
}
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
models_list[[paste(station_id, month_num, sep ="_")]]
}}
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
models_list[[paste(station_id, month_num, sep ="_")]]
}}
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
models_list[[paste(station_id, month_num, sep ="_")]]
}
}
# create list to store regression results
models_list <- list()
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
models_list[[paste(station_id, month_num, sep ="_")]]
}
}
View(models_list)
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
models_list[[paste(station_id, month_num, sep ="_")]] <- model
}
}
View(models_list)
for (key in names(models_list)) {
model <- models_list[[key]]
summary_model <- summary(model)
}
summary.mblm(models_list[[1]])
summary.mblm(models_list[[2]])
summary.mblm(models_list[[10]])
error_list <- list()
# Loop through each model stored in models_list
for (key in names(models_list)) {
# Attempt to generate summary; catch any errors
tryCatch({
# Attempt to generate the summary for the model
summary.mblm(models_list[[key]])
}, error = function(e) {
# If an error occurs, record the key (station-month combination) and the error message
error_list[[key]] <- list(error_message = e$message)
})
}
View(error_list)
# Loop through each model stored in models_list
for (key in names(models_list)) {
# Attempt to generate summary; catch any errors
tryCatch({
# Attempt to generate the summary for the model
summary.mblm(models_list[[key]])
}, error = function(e) {
# If an error occurs, record the key (station-month combination) and the error message
error_list[[key]] <- list(error_message = e$message)
})
}
for (key in names(models_list)) {
summary.mblm(models_list[[key]])
}
summary.mblm(models_list[[i]])
for (i in 1:20) {
summary.mblm(models_list[[i]])
}
for (i in 1:50) {
summary.mblm(models_list[[i]])
}
for (i in 21:30) {
summary.mblm(models_list[[i]])
}
for (i in 21:25) {
summary.mblm(models_list[[i]])
}
for (i in 21:22) {
summary.mblm(models_list[[i]])
}
for (i in 21:23) {
summary.mblm(models_list[[i]])
}
for (i in 21:24) {
summary.mblm(models_list[[i]])
}
for (i in 21:25) {
summary.mblm(models_list[[i]])
}
for (i in 26:27) {
summary.mblm(models_list[[i]])
}
# store results
regression_list[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"] ,
pvalue = mod.sum$coefficients["Year", 4]
)
for (i in 26:27) {
summary.mblm(models_list[[i]])
}
for (i in 27:28) {
summary.mblm(models_list[[i]])
}
for (i in 50:51) {
summary.mblm(models_list[[i]])
}
for (i in 30:51) {
summary.mblm(models_list[[i]])
}
for (i in 29:51) {
summary.mblm(models_list[[i]])
}
for (i in 200:246) {
summary.mblm(models_list[[i]])
}
for (i in 2150:246) {
summary.mblm(models_list[[i]])
}
for (i in 150:246) {
summary.mblm(models_list[[i]])
}
for (i in 175:246) {
summary.mblm(models_list[[i]])
}
for (i in 180:246) {
summary.mblm(models_list[[i]])
}
for (i in 25) {
summary.mblm(models_list[[i]])
}
models_list[[25]]
names(models_list[[25]])
names(models_list)
names(models_list)[25]
View(subset.df)
subset.df %>%
filter(2 == "2-XDD000.40")
subset.df %>%
filter(FDT_STA_ID == "2-XDD000.40")
subset.df %>%
filter(FDT_STA_ID == "2-XDD000.40") -> x
View(x)
subset.df %>%
filter(FDT_STA_ID == "2-XDD000.40" & MonthNum == 5) -> x
View(x)
# remove NA values
subset.df <- subset.df %>%
filter(!is.na(TAnomaly))
# create list to store regression results
models_list <- list()
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
models_list[[paste(station_id, month_num, sep ="_")]] <- model
}
}
for (i in 25) {
summary.mblm(models_list[[i]])
}
mod.sum <- summary.mblm(model)
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
mod.sum <- summary.mblm(model)
# store results
modelSummaries[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"] ,
pvalue = mod.sum$coefficients["Year", 4]
)
}
}
# create list to store regression results
modelSummaries <- list()
for (station_id in unique(subset.df$FDT_STA_ID)) {
for (month_num in 5:10) {
month_station <- subset.df %>%
filter(FDT_STA_ID == station_id & MonthNum == month_num)
model <- mblm(TAnomaly ~ Year, data = month_station)
mod.sum <- summary.mblm(model)
# store results
modelSummaries[[paste(station_id, month_num, sep = "_")]] <- list(
slope = mod.sum$coefficients[2,1],
MAD = mod.sum$coefficients["Year", "MAD"] ,
pvalue = mod.sum$coefficients["Year", 4]
)
}
}
View(modelSummaries)
modelSummaries
monthlyStation_stats
# create station-month key
monthlyStation_stats <- monthlyStation_stats %>%
mutate( key = paste(FDT_STA_ID, MonthNum, sep="_"))
monthlyStation_stats
head(modelSummaries)
for (i in nrow(monthlyStation_stats)) {
key = monthlyStation_stats$key[i]
}
monthlyStation_stats
View(modelSummaries)
modelSummaries["2-JKS044.60_8""]
modelSummaries["2-JKS044.60_8"]
modelSummaries[key]
modelSummaries[key]$slope
modelSummaries[[key]]
modelSummaries[[key]]$slope
names(monthlyStation_stats)
# create station-month key
monthlyStation_stats <- monthlyStation_stats %>%
mutate( key = paste(FDT_STA_ID, MonthNum, sep="_"),
model_slope = NA,
model_MAD = NA,
model_pval = NA)
for (i in nrow(monthlyStation_stats)) {
key = monthlyStation_stats$key[i]
monthlyStation_stats$model_slope[i] <-  modelSummaries[[key]]$slope
monthlyStation_stats$model_MAD[i] <-  modelSummaries[[key]]$MAD
monthlyStation_stats$model_pval[i] <-  modelSummaries[[key]]$pvalue
}
monthlyStation_stats
for (i in seq_along(nrow(monthlyStation_stats))) {
key = monthlyStation_stats$key[i]
monthlyStation_stats$model_slope[i] <-  modelSummaries[[key]]$slope
monthlyStation_stats$model_MAD[i] <-  modelSummaries[[key]]$MAD
monthlyStation_stats$model_pval[i] <-  modelSummaries[[key]]$pvalue
}
monthlyStation_stats
for (i in seq_along(monthlyStation_stats)) {
key = monthlyStation_stats$key[i]
monthlyStation_stats$model_slope[i] <-  modelSummaries[[key]]$slope
monthlyStation_stats$model_MAD[i] <-  modelSummaries[[key]]$MAD
monthlyStation_stats$model_pval[i] <-  modelSummaries[[key]]$pvalue
}
monthlyStation_stats
for (i in seq_along(nrow(monthlyStation_stats))) {
key = monthlyStation_stats$key[i]
monthlyStation_stats$model_slope[i] <-  modelSummaries[[key]]$slope
monthlyStation_stats$model_MAD[i] <-  modelSummaries[[key]]$MAD
monthlyStation_stats$model_pval[i] <-  modelSummaries[[key]]$pvalue
}
monthlyStation_stats
:nrow(monthlyStation_stats))
for (i in 1:nrow(monthlyStation_stats)) {
key = monthlyStation_stats$key[i]
monthlyStation_stats$model_slope[i] <-  modelSummaries[[key]]$slope
monthlyStation_stats$model_MAD[i] <-  modelSummaries[[key]]$MAD
monthlyStation_stats$model_pval[i] <-  modelSummaries[[key]]$pvalue
}
monthlyStation_stats
write_csv(monthlyStation_stats, "TMax_stats_monthlyByStation_wRegStats.csv")
knitr::opts_chunk$set(echo = TRUE)
# Consider that a) you are delivering high quality products that are designed for replicability and ease of us. Thoughtfully annotated, broken into digestible, discrete chunks, easy to navigate, readme documentation. Custom functions deployed to reduce code-clutter and make it easier to modify variables, plots, tables; axis titles, labels, plot titles, table captions, etc are dynamically referenced to minimize the amount of manual code modification that is required from year to year.
# and b) you are doing this for well under 'market rate' for a skilled coder. (but, could anyone do this now, in the age of ChatGPT?)
weekly_hrs <- sum(m = 0,
t = 0 ,
w = 1.5,
r = 0,
f = 2,
s = 2,
su = 0)
print(weekly_hrs)
paste0("$", weekly_hrs * 30)
# function to update weekly hours csv
update_hours <- function(period, end.date, hours, comments) {
# define relevant vars
dir = "~/Desktop/WaterQuality/"
filenames = list.files("~/Desktop/WaterQuality/")
index = which(grepl("Cameron_hours.csv", filenames))
csv_path <- paste0(dir, filenames[index])
# read in most recent hrs csva and bind current week object
csv <- readr::read_csv(csv_path)
weeklyhrs <-  data.frame(period = period,
end.date = as.Date(end.date),
hours = hours,
comments = comments)
updated_hrs <- rbind(csv, weeklyhrs)
# rename original csv to differentiate and preserve a copy
file.rename(csv_path, paste0(dir, "Cameron_hours_previous.csv"))
readr::write_csv(updated_hrs, csv_path)
}
# --- define pay period parameters ---
period = "Feb 12 - Feb 18"
end.date = "2024-02-18"
hours = 5.5
comments = ""
# ----------------------------------
update_hours(period, end.date, hours, comments)
View(monthlyStation_stats)
write_csv(monthlyStation_stats, "TMax_monthlyByStation_mblmModelStatistics.csv")
ggplot2::ggplot() +
geom_point(data = month_station)
ggplot2::ggplot() +
geom_point(data = month_station, aes(x = Year, y = TAnomaly))
